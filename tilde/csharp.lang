format = 1
%define {

	comment-line {
		%highlight {
			start = "//"
			end = "$"
			style = "comment"
		}
	}

	comment-block {
		%highlight {
			start = "/\*"
			end = "\*/"
			style = "comment"
		}
	}

	keyword-as-identifier {
		%highlight {
			regex = "\@\w+"
			style = "normal"
		}
	}

	reserved-identifier {
		%highlight {
			regex = "\b(?:abstract|as|base|bool|break|byte|case|catch|char|checked" +
					"|class|const|continue|decimal|default|delegate|do|double|else|enum" +
					"|event|explicit|extern|false|finally|fixed|float|for|foreach|goto" +
					"|if|implicit|in|int|interface|internal|is|lock|long|namespace" +
					"|new|null|object|operator|out|override|params|private|protected|public" +
					"|readonly|ref|return|sbyte|sealed|short|sizeof|stackalloc|static" +
					"|string|struct|switch|this|throw|true|try|typeof|uint|ulong" +
					"|unchecked|unsafe|ushort|using|virtual|void|volatile|while)\b"
			style = "keyword"
		}
	}

	contextual-keyword {
		%highlight {
			regex = "\b(?:add|alias|ascending|async|await|by|descending|dynamic|equals|from" +
					"|get|global|group|into|join|let|nameof|on|orderby|partial" +
					"|remove|select|set|value|var|when|where|yield)\b"
			style = "keyword"
		}
	}

	attribute {
		%highlight {
			start = "\[\w"
			%highlight { use = "attribute-constructor" }
			end = "\]"
			style = "misc"
		}
	}

	character-escape {
		%highlight {
			regex = "\\[0abfnrtv]"
			style = "string-escape"
		}
	}

	character-escape-unicode {
		%highlight {
			regex = "\\u[A-F0-9]{4}"
			style = "string-escape"
		}
	}

	character-escape-unicode-variable {
		%highlight {
			regex = "\\x[A-F0-9]{1,4}"
			style = "string-escape"
		}
	}

	character-escape-unicode-surrogate {
		%highlight {
			regex = "\\U[A-F0-9]{8}"
			style = "string-escape"
		}
	}

	string-interpolation {
		%highlight {
			start = "\{"
			%highlight { use = "csharp" }
			end = "\}"
			style = "normal"
		}
	}

	string-verbatim-interpolated {
		%highlight {
			start = '(\$@")|(@\$")'
			%highlight { use = "string-interpolation" }
			%highlight {
				regex = '""'
				style = "string-escape"
			}
			end = '"'
			style = "string"
		}
	}

	string-interpolated {
		%highlight {
			start = '\$"'
			%highlight { use = "string-interpolation" }
			end = '"'
			style = "string"
		}
	}

	string-verbatim {
		%highlight {
			start = '@"'
			%highlight {
				regex = '""'
				style = "string"
			}
			end = '"'
			style = "string"
		}
	}

	string-literal {
		%highlight {
			start = '"'
			%highlight { use = "character-escape" }
			%highlight { use = "character-escape-unicode" }
			%highlight { use = "character-escape-unicode-variable" }
			%highlight { use = "character-escape-unicode-surrogate" }
			end = '[^\\]"'
			style = "string"
		}
	}

	character-literal {
		%highlight {
			start = "\'"
			end = "\'"
			style = "string"
		}
	}

	preprocessor-directive {
		%highlight {
			regex = "#(?:if|else|elif|endif|define|undef|warning|error|line" +
					"|region|endregion|pragma warning|pragma checksum|pragma)\b"
			style = "misc"
		}
	}


	attribute-constructor {
		%highlight {
			start = "\("
			%highlight { use = "csharp" }
			end = "\)"
			style = "normal"
		}
	}

	number-hexadecimal {
		%highlight {
			regex = "0x[A-F0-9]+"
			style = "number"
		}
	}

	number-decimal {
		%highlight {
			regex = "\d?\.\d+[MmDdFf]?"
			style = "number"
  		}
	}

	number-integer {
		%highlight {
			regex = "\d+(UL|ul|U|u|L|l)?"
			style = "number"
  		}
	}

	csharp {
		%highlight { use = "comment-line" }
		%highlight { use = "comment-block" }
		%highlight { use = "keyword-as-identifier" }
		%highlight { use = "reserved-identifier" }
		%highlight { use = "contextual-keyword" }
		%highlight { use = "string-verbatim-interpolated" }
		%highlight { use = "string-interpolated" }
		%highlight { use = "string-literal" }
		%highlight { use = "string-verbatim" }
		%highlight { use = "character-literal" }
		%highlight { use = "preprocessor-directive" }
		%highlight { use = "attribute" }
		%highlight { use = "number-hexadecimal" }
		%highlight { use = "number-decimal" }
		%highlight { use = "number-integer" }
	}

}

%highlight { use = "csharp" }